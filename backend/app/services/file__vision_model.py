import requests
from sqlalchemy.orm import Session
from openai import OpenAI
from fastapi import HTTPException
from core.config import settings
from models.operation_models import Course
from schemas.course import CourseRead
from PyPDF2 import PdfReader
import io

client = OpenAI(api_key=settings.openai_api_key)


def process_syllabus_and_generate_questions(db: Session, course_id: int):
    """
    Fetches a course by ID, retrieves the syllabus file URL,
    and processes the file to generate questions and answers using LLM.

    Args:
        db (Session): Database session.
        course_id (int): ID of the course.

    Returns:
        Dict[str, List[Dict[str, str]]]: Questions and answers generated by LLM.
    """
    # Step 1: Fetch the course by ID
    course = db.query(Course).filter(Course.id == course_id).first()
    if not course:
        raise HTTPException(
            status_code=404, detail=f"Course with ID {course_id} not found."
        )

    # Step 2: Retrieve the syllabus URL
    if not course.syllabus_url:
        raise HTTPException(
            status_code=400, detail=f"Course with ID {course_id} has no syllabus URL."
        )

    syllabus_url = course.syllabus_url
    question_number = 5

    # Step 3: Download the PDF file
    try:
        response = requests.get(syllabus_url)
        response.raise_for_status()
        pdf_content = io.BytesIO(response.content)
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error downloading syllabus PDF: {str(e)}"
        )

    # Step 4: Extract text from the PDF
    try:
        reader = PdfReader(pdf_content)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error extracting text from PDF: {str(e)}"
        )
    print(text)
    # Step 5: Prompt the LLM for questions and answers
    prompt = (
        "You are a teaching assistant that generates quiz questions and answers from course materials. "
        f"Based on the following syllabus content, generate a list of {question_number} questions and their correct answers:\n\n"
        f"{text}\n\n"
        "Format the response as a JSON array with each element containing 'question' and 'answer' keys."
    )

    try:
        ai_response = client.chat.completions.create(
            model="gpt-4",  # Ensure the correct model is used
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=2000,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
        )
        print(ai_response)
        # generated_content = ai_response["choices"][0]["message"]["content"]
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error interacting with LLM: {str(e)}"
        )

    # Step 6: Parse the response
    try:
        questions_and_answers = eval(
            generated_content
        )  # Replace eval with json.loads for valid JSON
        return questions_and_answers
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error parsing AI response: {str(e)}"
        )
